#include "dna.h"
#include "utilidades.h"

#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <omp.h>
#include <math.h>
#include <time.h>
#include <random>
#include <chrono>

using std::string;
using std::cout;
using std::endl;
using namespace std::chrono;

void teste(string sequencia_dna){
    sequencia_dna = valida(sequencia_dna, nucleotideos);
    cout << "Sequencia de DNA: " << colorir(sequencia_dna) << endl << endl;
    
    cout << "Frequencia de nucleotideos:" << endl;
    int *frequencia = frequencia_nucleotideos(sequencia_dna, nucleotideos);
    for(int i = 0; i < 4; i++){
        cout << nucleotideos[i] << ": " << frequencia[i] << endl;
    }
    cout << "Rosalind: ";
    for(int i = 0; i < 4; i++){
        cout << frequencia[i] << " ";
    }
    cout << endl << endl;
    
    cout << "Complemento DNA: " << endl;
    string complemento = complemento_dna(sequencia_dna);
    imprime_complemento_dna(sequencia_dna, complemento);
    cout << "Complemento reverso DNA:" << endl;
    cout << colorir(inverso(complemento)) << endl << endl;
    std::string().swap(complemento);
    
    cout << "Traducao de DNA para RNA:" << endl;
    string sequencia_rna = traduzir_dna_rna(sequencia_dna);
    imprime_traducao_dna_rna(sequencia_dna, sequencia_rna);
    std::string().swap(sequencia_dna);
    
    cout << "Sequencia de RNA traduzida para Proteinas:" << endl;
    //traduzir_rna_proteina_single(sequencia_rna);
    traduzir_rna_proteina(sequencia_rna);
}

void teste_single(string sequencia_dna){
    sequencia_dna = valida_single(sequencia_dna, nucleotideos);
    cout << "Sequencia de DNA: " << colorir(sequencia_dna) << endl << endl;
    
    cout << "Frequencia de nucleotideos:" << endl;
    int *frequencia = frequencia_nucleotideos_single(sequencia_dna, nucleotideos);
    for(int i = 0; i < 4; i++){
        cout << nucleotideos[i] << ": " << frequencia[i] << endl;
    }
    cout << "Rosalind: ";
    for(int i = 0; i < 4; i++){
        cout << frequencia[i] << " ";
    }
    cout << endl << endl;
    
    cout << "Complemento DNA: " << endl;
    string complemento = complemento_dna_single(sequencia_dna);
    imprime_complemento_dna(sequencia_dna, complemento);
    cout << "Complemento reverso DNA:" << endl;
    cout << colorir(inverso_single(complemento)) << endl << endl;
    std::string().swap(complemento);
    
    cout << "Traducao de DNA para RNA:" << endl;
    string sequencia_rna = traduzir_dna_rna_single(sequencia_dna);
    imprime_traducao_dna_rna(sequencia_dna, sequencia_rna);
    std::string().swap(sequencia_dna);
    
    cout << "Sequencia de RNA traduzida para Proteinas:" << endl;
    //traduzir_rna_proteina_single(sequencia_rna);
    traduzir_rna_proteina_single(sequencia_rna);
}

void teste_1(){
    string sequencia_dna = "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"; // rosalind 1
    teste(sequencia_dna);    
}

void teste_2(){
    string sequencia_dna = "CCTTCTGCTCGGTGACCCGTCCCAGGGGTCTGACAAGCCTTATTGACTCATGCCTTCTAACTATCTTCATCGTTAATACCCCTAGAACGGGATAACTCCGCCTAATATCCCCTCTACAAACCTTAGCAGCCAACCCAAGCAGTACTGATGGGGGATGGATTCATGGAGGCAAATTTACTTCCAGTACCATTGACTCGCAGGAAGCAATGATAGCGCACAGGTCGAATTCCCGGTCTGCCAGTGACTCCGACGCTGAATTCGCTCAAGTCTCGTACCACGTTCGAAGTCTGCCACCCCAGCCTGGGGTCGGTCTGTAGCTGTCTCGTTCCATATGATCTAAGACTCTGGTTAAAGCATCGTATTCAGGCCCTATAGCGGTACTGTGTTCGCCGTGATCTCGTACACGTGACGTTGCTTGCCATTCGTGTGCACGAGCCAGTCTTTTAGATGCGTACGCCAATGGCTTAGGGAAACCTCTAGCGTTCCGGGCTAAACAATTGAGCCACATGTACCTCCGCATTCAAGTAACTAAAGCATATATCCCGATTCTTGGCCTACTACTGTTGACAGGAGCTACAAGACAACGACACTCGGAGCACATTTCGACCAAGACAAACTAGGGTTTTGGTATGCGAGCTATGCCGTGTAAATAACTCACTTACCTCTACCACCCGATAGGATGTGTCTGGAGTCTATTTGGAAACTAATATATATTCAATGGCGTGCCACGCGTCACGCGCAGACGTTTTTCTCAGCCGCGCCAGCGCCGCAGTTATCCACTTTTAAGCTGGGTTGACTGTCTTCTACGTCGGTCCAAACCTAATTCCCACTGC"; // rosalind 2
    teste(sequencia_dna);    
}

void teste_3(){
    string sequencia_dna = "ATGGCCATGGCGCCCAGAACTGAGATCAATAGTACCCGTATTAACGGGTGA"; // rosalind 3 proteina
    teste(sequencia_dna);    
}

void teste_4(){
    string proteina="AUGGAUAGCACGGUUAUAAGCUCAAUCGCGAAAUACGACGACUAUGGCGUCUUGCUCGGGAUGAUGUUUCGUUUGGUUUGCGAUCGCGCGGGGCUCAAUGACGAUGCCGCGGUCUUCACGGCUUGCCGGGCGAUCAGAGCGGGUGCGAGACUGCAAUCUCCCGCUACGGUAAGGGUGUGCCUGUCGAACCCGUUGGAUCAUGAUAGCGGGCGGAUCCUGAGAGCUCGUGAUCGGAUUCGUGUCACAGCCUGCAUCCUCUGUUCGCAGGAAGCUUGUAGACGAAGUCUGGCCGGUGCUGCUAGCACGGGUACGUAUGAGAUCUGUUGUAACUACUACUGGUUGACUGAUAAGAGAGCGGGUCCCGGAAUGCUCAGUACGAACGAGGUGAGAUAUCGGGUAGGGAGACUUUUGAAGUUCUACUGCCUUGAGAUCAGCUACAGAACUAUAAACUGUGCUUUAUAUAUACUGUGUGAGACUACGCGGGCCCACCCGCCUAAGGGUUAUCGAUUGCCUUGUAGGCGUAACUAUCCGGUGGUAAAGACGUGUAUAGGUUGGUGGAGGAUACUGGGCUCCGUUGCUCGUGUAGCGAAAGUGCAUACAAUAUCGCCCGGCUCCCGUCAUCGUUCACGGCCAGCUUUUUCUCGUGAUAUCCGAGUCUUUAGCGGUGGAUUUGGCUGGAUUCAUAGAGUCAAGGCGUUAGACAUAGCAAAAGAAAGCCGGCACCUACUAGCAAGCUGGGUCGUCCUAAAAGCUACUCUCCACCACGCGAUGAGGAGAUCCCUUUCGGGACAGCUCACUCGAGGGCUUCCUAGUACUUGUUUCGGCGACUUCGGUGCUUACCAUCAAAUAGAGCGGUUUGCGACUUCGCGUCCCAGUUGCCGUUUGACGUUGGAUUUAAGAUUGGUUCGAGGCGAAGGGACCGGCGCUACCGUUCGUGACCCACACAUUAAUAGAUUUCCCACCUCUAAGUCAUUACAUAGACUACGUAAGGUUGACAUGUAUCGUACGAUAGUCCUGCAUAAGUUAUGCCACCAUCGAUGGUUCUUAACGCUUUCACAGCCGGAGAACCAGAUAUAUUUCCCAGUUCACGCCAAGGCCACAUAUACGUGCCAACACGCAGCAAGUAUAUACGAUCAAGCUAUGGGCUAUUGGACGGUCCCUGCCACCUUGCAACAUGCGACUUCGCCAAGUUUGUCGCUAAGAGGCAUUCAGGUACUCCCUAGCGCUCCAGAACAGAGUCGAGUCACUGUUGAAGUUGGCAUUACGAAAAUGGACAUUCAUCCUUCCUAUGACAGUUACCACUCACACAAUCAUGCAUUCUCCCCAAUUGCCACCCUUGGCUCUCGCCAGUAUUCCUCUGCUCGUAAGUGGAGAUCGCGUGACUUGAUGUCAGUCCCUGAGACCUCAAAAGCCGCAGAUGCUCCCCGCGAUUCAUGGUGGUGGGCCGUACGACUGGCAGUGGAAUAUCGGCCGUCAUCCCCCUAUCAGUUACGGAGUUUCAUAGACUGGGCCGGUGAAUCGUUUACACAUCCUAGUGAGUGGGAUAUAAAGUUCGCACGCAUGCUAAAACUCGUCAGGAAAGCGCUUUCAGCCAGUAUCCUUCUUACGGCUGCAUUUCCUGUAAACGUCUACUGGGCCCCUGGGUGUACUCCGUUCAGACGAGGAGACCACUUGGUUGUCCCCCGACUACGGAUUCUGAAGGUGGCUCGUGAAUGGCGACAUUCAUGGCGGGGGAUCGUAGGACGCGAUUAUCAUCGACAGCCUCACAAUUGGUUCCUCCACCCAAGGAAUCCCCAGGAGUGCUGUGGAUCCUGUACGCGACUGACAACACGACCUAAAAUGUCGGCUCGAACUACUCGCGUCUUGUAUAUCAGCUGCAGGAUGCUAGCUGAGAAGCUACUCUGUCCGGGAGUAGUCCGAAGACUACUUGAUUCUUGGAUGACACAGCUAACUUGGAUCCAUAGUUGUUUAAUUGAGCUUCGAGCUGAUAUUGCUUUUUUCUGUAUCUCACUACGACCUCUCGUUACAGUUUUUAGAAAACAAUUUCAUUACUCGUCUGAUGUGUAUCUCGCUCCUGAGAAGGGCCCCCGACAGAAUUUACUAGGUUGUUGCUCCUACAGCAUUGAUAACCGUAAAUGGAAGAUCCUCGGCAUGGGUACGACGCGACAUGUCCAGGAGACGAAGGCCACAGGUUCAGGCCAUAAACCAUUCACUGAAAUCCACAGUAAGAAUAGGCAUCCGUGGUAUGCCCCGGUUGGUGUGAGAACUUGGGUCGAUUAUCCGGUAGGGGGGAGUGGGUGUUCGACCUCAUUUAAGACGGGGUUCAGGGGCCACUACUUUCCUGCAUCUCCGCAAGGGCCGUGCCCCUUAUGUAGGGGUGUAAGUACGCGCUCCUCACCACCGAUUUCUAUAUCUAGACGAUAUCUCGGACCGCUUGGGCCCAUUUAUGUUGUUCGACGUAGUGAAAGCCCGGUGUGUCACACGGGACAAUUCACCGCUGAUCGUAGGAGGAUGCAUUUGGGUAGUUCCAGCUAUUAUUGGGUGUCCGACUGUCCAACAAAUCAUGUCUCAGGCUCAACGACGCAUUCAUUACGAAUAUUCGGAAACUCUAUUCUCGAUAGCACAGAACACAGGGGGCCGGAACCCUGUCCCCCAUGUUCCAGUCCGUUACCGUCCCUCGAGGUGUUUGAAGGCUCGCCUCGUGUAAGGCAGGGCCAGCUUACGAUUGUGGUAAGUGGUGCUCCGACUCGCUUUAGUCACGAAGCGACGGCGCUUCUCACGCCAACUUACUAUGCCCGGGCAGGGUCUGUGCGUUCUGUGCCACGUCCAACCCGGUCAACCGUACGGCUCAGUAACCUCCAAGCACCUCUCGAUCUGCCCUCAGUUCUUAUUGAGCACGCUUUAAAAUGUGCGGUAUAUGAUAAGAGACUAAUCGCCGUGAAACUGGCAUUCCGAGUUGCGACGGUUCCCAGAUGCACCCGGGUGCUAUACUUAGUUUCACCAGGGGCAUUCUCCCGAUCUAUGACGAGGGGCCCCGUCGUUGGCCGAAUUCGGACAACUACCGUAAGUGGGUGUUGGAAUCCAUCCUCUUGCGGUCGUCUAAAGCUUUUGAUAGAACGACUGUCUGUUCUUGUGUUGGUAUCCCGACGAAUGGGACAGCAAACAAGUUUUGGGCUGGACACCAUGCUAUGUCUUCGAAGCAGAACCUAUAUGGCUCAACGCUAUAAGUUACGUCAAGCAAGAAAUCGAACACAGAAUAAUCCGCGCAUCAGCAUUGGUUUUUCGUGUGCUUUCUCGGUGAGGGGUAUGUGUAUACAGAUGAUUUACAAUGUAAAAGCUAUAAAUCCCCGUGAGCGCGGGUCAGAACGGACUGGACUUGGGCCGACAAAGCUGCCCGGUGCAUUGGCGGUAAGGACCAAGCCCAAUAGGACUGCAGAACUUUUUAAUCUUUGUCGAAUUCGACGACUCUGCGGUCACUGCUAUUUGGUGCACAAUAGAAGGUUGGCUGUUGGAAUAGAGCGCCGUAAAAAGCAAAUGGGUAAUGCUUGGUCGCGUGCGAAAGUGUCGACCUUUUUCCGGUCUCUUAUUUCGUGCGCCACAGCCACGAUCACAAGGUACGAUUGGCUAUACUGGUGGUUGGCUCGCAACCAGGCGUGCAGCUUACUCGAGUGUGCCACCUGUUCGGCAACGUUGAUUAAGUUCUGGGCAAUCUCCCUGGUUAGCAUUCCUUGUGGACUCUGCUUAGUUUGGAUUCAGUGUUGGAGACCGUACCACGCGGUAGUGGGGAGCUCCGUCGAGACACCGUACCACCCCCAAGAUCCAGCAAUUUUAGCGAUAGGAUAUGAUUGUUUUCAGCGGGUCCUCACUGGUACGAACGCCUCAGGCUGCAGCCCCUUCAUACCGGGCGAACCGACACUCUGGGCAGCCGAAAAGGCCGGAAUCUCGACAAGGCAUGGACUCUUUCGUUACUACCCCACGCAGUCUAACAACCACAGGGGGCUUCUACGUCACGUGUGCCACAGCGGAAACGGAACUUUACAUAUCUCCGAAACACUGUAUCCGAGCCAAUUCAAUAUGCGGAAGGACUCCCCCCGAGACUCAAGACAUGAGCCAAGCGUUUACGGUACUAUACCCAUUUCACCACCAAUCGAAAACGUUAGCGACGGGUGCAGAUGUGUUGCGUACCAAGGUGGCCGCUCUUCGCCUCUGCUGCCAACUUCCAUCAGCGAACGUACUCGUCAGAGUUCUCUUGAGGUGAUGCAACAACCGUCGCAUCCGUUUGGAUUGCUGCCCGAUAAGACUAAUGAACGGACCCAAUCACCACACCAGAAAUUGGUCACGUUUCUUAGGUAUCAUAAGACUUGGUCGCAGUCGCCUGACCCACACGUAGGCAGAUCUUCGCGCUUUAGACCGCGACACUGUUCCUGUCAGUCCGUGCAUGGUCUCCAUCAGCAGUGCACGAUCGACCGCAACCUCCCAUCACGUACCUAUUAUACCGGGAGAUCCUGUGUGAAGGCCCGCAACCUCAUUUUCGCGGCUGUACACAGUCGCUACCAAAUCUUGGAUUGGAAUGAUGGUAGGAUAGUGCCAAACAUUCUAGGUUCCUCGAUAGAUUCGUGUACUCCACUCCAUACCGACUCUCCUCGGACUCAACGUGCCGACCAGUUGCUGUCACUUCUCCACAUUAUCCGCCUGCAUUAUCGUGUGUGCGUCUUAAACUCACACGGGCUGGGUUGGGUUCGACGCAGUUCAAUGAUUGAUACUACUGUCGACCUACUCGCAAGACUAAUAUGGUCCGCCAUUCGUUUGGGCGUAAAGCACAAUUUCCAGUCUCAGUACCUGCAUUGGCACGUGUCUAAGGCUUCCACACGCCGACAAAUUCGGCAAAUGCUAUCGUCUCUGCUACCGAGUCGUACUGUCGACCUGGGUAUAGCCACCGCAGUACGGGGGCAGCUGCAGGGCGGCAAGUGUAGACGAAGUACGGUGCUUCUGCAGUCCGCCAAAGCCCAAAGGACCUUUGGUAUAGGGCCAUCUGCCCUGAUAGGUUACGCGCAGGCAAUGACUGGGACUAGGGAGGGCUUCCCCAAAGUGACCACAUGGCACGAUGGAAGCCCGGCAAAUGGUAAGCUACCUGUGGGACUGGUGUCUACCCCUUCUAUGCGGUGUAACUGGGUGAGUACUGCUUGGCAUCUCAGGUGGCGUACCUUCUUGAGACAACCUCGACACCAUGAUCCGCCGAGCAUAGGCGACAGGGUGCGACCUACCGCGUACCGGCAGUUCCAGCCAGCCGCCACUGGCGUAUUGCACAGCAGAAUGCGAUGUCCCCCCCGGAGGAUGUGGCGUGGGUCGAUGUUUGAGGUUCCUACCGUGUGGACCGCCUCUAUGUUGGGUCGGUCAGCUAAGCGCCUCUCUACUUCCGGGUUACGCAUGGCCCCGUCGCGAAGAGGCCACUACGAUGCAAGUCUGAGGCUCGUCGGCUCGUUUCGGGCGCACAGCCGCCAGUAUGCUGGGGUAAUGACUUCCUAUCAGCCACCAAAUCUCAGAGCAGGGCCCCAUUCGAGCGUUGGUACAUCCCACUUCUGCUUCGUACUUUCUAGGUUUCUGAAGACCCUUUCCUCAAAGUCCAAUGGGCCGCCCCGUCUGCGCAUACACACGACGGAAGGCCAUAUUGUGGCCAAUACUUGCUCUCGCCGUCGUCUUCCGGUGUUAGGAAUUUUGAUAUGCGCGAUACUCCUCUCUCACCAUAACGCGCGCAUAUAUAAGCGUUGCAUGAUUACAUUUGAGAUGUCUCCUAUUGCGGCUGCGAGGAACAAAGUUCAAAAACCCUCCCUCCAGAGCGUUGGAGGUGCGAGGCUAUCGGAUAGCCAAGAGUUUGUCCAGCCAGAGGUUCUGCGUCACCAGGCAUACUCCCCAUGUACGACCAACAGGUACCGUUGUUUCAGGGAAGGUAGCCUAAAUGCGUCCAGGGGUAGCGGGCACAUUUGCAGACAGAGACAAUUCUUCAGGUGGGAGCGAAGCCCUGAAGUCCUGGCGACGGAACUGUCGCCCUCGCGGACGUUUUGUUUAAGACUAUCAUCGUGCCGCGGAGAGAGGCACCGAGUUGGUGCGUCGUCAAUCAGCUCGCCUUAUGUUAAACGAAGGAGGGUUUGUUUUCUAUCCCGACCGUCGUGGCUUAUGCUGUGCCGCUUAUUUGGCUCCCGACUAGUGAAGAAGUUUAAACCGUGCGAUCGGAAGGAGUGUUAUAAUAGCAAAUUGCCAGCAUCUGCCGCAUCACAAGAUUGCCGCGCCAGGCCUCCUCAUGAAGAUGAACCUCGAGCACCUUGCAACAGAUGCGAAAGGCACAUUCCGAGGUUGUCAGUGAGUAUUGAGUUACCGCCAACGGUAUACUGUUGCAGAACACACUACUUUCAUCUAAACAGGCAUUCCUCGGACGUAUGUCCACAUUUGAUGAGCGAUGGAUCCAGCGGUAUGUCAGUCAAAGAGAAUAUUAUCACAUUGACACCAGGAUAUAUCUUGUGUUGCGUUCUGCACAUUUCUGCACCUCUGUUAUGGUUUGCUUUAUAUGUGCUCCUGCGAAGCUCUGCGGCACGACUGAAACCAGGAAAGCAACCGCUCGACUUGUUCUGCAGUACCCGAAGCGAAGUGCCUAGAUUUCAUAACCAGGAUCACGGGGAAUCACCUUCAUCCUGGUCACACAGCCCAACCGGCGGUCGGCACGUAUCCUUGAGUCAUUAUACUCGGGGCGGAAUCGCGUCUUUUGGUCACUCCAGCAAGCCCAGUCGGUCCCCGGAAGGUGGACGACUCUUCCGGACGGUGAAGGGGUCCGCUGUGCGGUCUUUGGAUUCAAGCGGUGGGACGAUCCUCCUAACUGCUAAUUGUGGAAGGGUUAGUGUAACAUGCCAAGGAAGUCUAUGUGUGUAUACUAAGGAGACGGACAACAUCGAUGUUAAAUGUCUACUGUGCUGUAAGCUUCGUACGACCUUCAAAGGAGACCGGGUGAUUCGAGUCUCCUGUAAACCCCUUUUAUCCCAUCUUGCUGAGCUAGAGCGUCACCGCCACUCAGUGAAUGCGCGCAUGCCUAGUUGGUGCGCCUAUGCUAUAAAUGAUUCGAAAGGCGCUGUCCUUCAUCGAACAGGCUGGAGGCCGACCUGCGCUUCGGUUAAGUCCACUCGCCGCAGCGACCACCGUUGUUGGGCCAGAGUAUCAUGUAUGGCUAUAAGCAGACCUGACUUCAGUGGGAGGGUGGUCAAUACCCGACUCCCCGUGCAUGAAAUUUCCGGCUAUGAUGCAAUCGUAUUGUCUUAUUCCGGGCGCACCCUGACUAUUGCAUAUGAUCGGAUUGAGGAUUUCCAGCUCCUGGGCUCCUAUGCCGAGAUGAGGCGGCUUAGAGUGUGUCAGUGCCUCAGGCGUCGCCAGGUGGCUGGCAUUUCUCGUCCUCGAUCGCAGGCUGCAUGGAACGUUGCGACCAGGGCGUGCGGUCAUAGCUUCGUAACCCUCGCUAGACCGCCGUCUUUUUGUCACGAUAGGAGGAUUUCCUUUUCUGGCUUUGGCAAUUUUAUGCCACGACGCUGCAGCCUUUACGAUAGAAAGGCGAGGCGUCACACCUCGUUCACGAGCAUGGAGCUAAAUAGCCCCCUCUCGCAAGCGCUAUCGCCGAUUUCUGUUCUAUCGCAGGCGCCUGAAUUUGGCAACUUAGGUUACGCUUCAGGUCGACACCAGUCGCCAUCCCCCGGCAGCCCUCGGUGCGUGAUCGGUGUCGGGUGCCUACGUGAGUAUCCGCGUUUCUUCAACUUGGCCAUCCAUGUCCAUGCAGCGGACUCAUGUCAUCCGGAUUUGGCAACAUGGCAUAAUUCCGCUGGCGCCGUCUGCCUGACUGCUAAGCGGUCUCACCCGCAGCAUGCAUGCUUCUAUAGUAUCUCAAGCCACAUCGACCAAUCAGGUAAAGCCCGAUACGGAGCUGGGACAACCUUUUGUAAGUUCUGGCACUCGGGCGUCUAUAAUCUACGAAAGGGGCUUCCGCAUUACGACCUAUCAAACACGACCGCCAUCGUCCCCGGGGCACAGCGCAAUAGGGCUUGUUUACUGUUUAUCGGAUUGUGUCAAGCAUGUUUAGAACAUGUAGAUAGGACUAUCUUGCUUAAUGAACCUUGUGGACGACAGUCCAUGGAUUGUACCCUGGCGACUCCACGAUAUGAGAGUAUCUCCCCUCAUGUCUGCCCGUUUUGGUGGAUAUCAUUGUCGACCAGUGUUAUGUGGGCAGCGUCAAUCGAAGUAAUAAAUCUUAUCCAUGUAAUUUAUCUGUCUCCCGAGGUUACCUUUCGGUCACGGUACUAUCUAACAGUGAUCCGCACAAGGGCGAAUCGACUCUAUCCUCUCGGAGACGGGGGAAUGUGUUCUGACAUAUGUCGGUCGGGCUCUAAGUCGAGAAAUGCGAGAAAAUGUAAACUGUUAUCUCGCAUUGUCAAAUCGACAUGCAGAGAGUGUUUGUAUCACGAGAGAGACGGGUACUCCGCUUGUAUGCAUAGAAAGACCCUCGCAUCCUCGGAGCCAGGUGGAAUAGUAAAGGACCACUUAAUAUUUCUUCGAUUACUUAUACUAGAAAGCGGGCCGGCCCCCUUUGAGAUACAACACUUAGAUUUGUCGCGAAGCUCUGAUUCUGGUCACCAGAUCGUACAGGCGCAGCAAAUAAUACGUAUUAAUUCUCGGUUGAAGUCAGAGGCGAUAAUUACCCUUGUCCUGAUAGAAUGUAGAGACCCGCUCCGGCAGACUACCGAACGAACGCUAUUGACGUGCAAGUCACACGAUUUUCCAGACCCCAGACGGCUCGGUAAAGUGACCAGGUCUACGAGGCGACGAUGCAGAUGUAAGGUUGAUACCGUAGAUAUAUGUCAAGUAAGUAGGACUCGCUGGCUACGCAAAGUGGAUUAUAGGCGGACGGGUGAUUGUUGGCUGUCCCUCCCAUACUUUUCGUCUACGAUUACUAGACGGACGUCUAGGCUAUCCGAGCGUCGUCCGGACCACCCCCAAGAUUACGAAAACAAGCGGUACCCCCCGCUCUGCAGAAGGAAGCGAAGAGUCAAUUUACGGACGGCUCUCUUACGCCUUUCAACGCGGGGCUCACCACGCGUCGCGCUGCAAAUCGAUAUGGAUAGGAUGACCAUAGAACUGACGGGUAUGGGGUGGGCCAUCGGUGAACUAAUCGGCCUUAAGACACCCAAAGGAUCUGGGCCGUCGAUCAAUGAGAACAGGUUUAAUCUCGCACGUAGUUACAAAAAAUUCCUAUGCAGGACUCUAGAGCCCCGCGCUUACCAUGCAGGUGUUCCUGGAAUUGCCUGGGUAUCACGUAGGCUUGGCAGAGAUCUCAUCAAUGAUGAGGAGUUUAUACUGAAUUCCGCUACGUACUGCUGCAGGCGAACUGGCGAACAGGUGGAAGGUAAUUACAGUAGUGCCUCGCUAUUGCAUGCCACGGCUCUUCAGUGUGGAUCAGGGCUAGUACCCCUAGUCUUAGAGGUACAGCAGUGGUCAGGAAUUCAUUGCCCUGGGCCCACUGAUAAGGGACACCUUAGGGAGGCGUUUCUCCUUACUGCCUCUGCGAUAAUUGCAAAAUACAUUCACGCAAAGGCUACUACCGUUGUAGAGCACCACCACAGUUCUUGCGUAUCGCUUAUGCAUAUUGGAUAG";
    
    traduzir_rna_proteina_single(proteina);
    traduzir_rna_proteina(proteina);
    
}

void teste_5(){
    string sequencia_dna = "AGAGCAGCGTGGTCCCAGGAGGCATACACAGAGAGCCACGGCCAGGGCTGAAACAGTCTGTTGAGTGCAGCCATGGGGGACGTCCTGGAACAGTTCTTCATCCTCACAGGGCTGCTGGTGTGCCTGGCCTGCCTGGCGAAGTGCGTGAGATTCTCCAGATGTGTTTTACTGAACTACTGGAAAGTTTTGCCAAAGTCTTTCTTGCGGTCAATGGGACAGTGGGCAGTGATCACTGGAGCAGGCGATGGAATTGGGAAAGCGTACTCGTTCGAGCTAGCAAAACGTGGACTCAATGTTGTCCTTATTAGCCGGACGCTGGAAAAACTAGAGGCCATTGCCACAGAGATCGAGCGGACTACAGGGAGGAGTGTGAAGATTATACAAGCAGATTTTACAAAAGATGACATCTACGAGCATATTAAAGAAAAACTTGCAGGCTTAGAAATTGGAATTTTAGTCAACAATGTCGGAATGCTTCCAAACCTTCTCCCAAGCCATTTCCTGAACGCACCGGATGAAATCCAGAGCCTCATCCATTGTAACATCACCTCCGTAGTCAAGATGACACAGCTAATTCTGAAACATATGGAATCAAGGCAGAAAGGTCTCATCCTGAACATTTCTTCTGGGATAGCCCTGTTTCCTTGGCCTCTCTACTCCATGTACTCAGCTTCCAAGGCGTTTGTGTGCGCATTTTCCAAGGCCCTGCAAGAGGAATATAAAGCAAAAGAAGTCATCATCCAGGTGCTGACCCCATATGCTGTCTCGACTGCAATGACAAAGTATCTAAATACAAATGTGATAACCAAGACTGCTGATGAGTTTGTCAAAGAGTCATTGAATTATGTCACAATTGGAGGTGAAACCTGTGGCTGCCTTGCCCATGAAATCTTGGCGGGCTTTCTGAGCCTGATCCCGGCCTGGGCCTTCTACAGCGGTGCCTTCCAAAGGCTGCTCCTGACACACTATGTGGCATACCTGAAGCTCAACACCAAGGTCAGGTAGCCAGGCGGTGAGGAGTCCAGCACAACCTTTTCCTCACCAGTCCCATGCTGGCTGAAGAGGACCAGAGGAGCAGACCAGCACTTCAACCTAGTCCGCTGAAGATGGAGGGGGCTGGGGTCACAGAGGCATAGAATACACATTTTTTGCCACTTTA"; // testosterona
    teste(sequencia_dna);    
    //MGDVLEQFFILTGLLVCLACLAKCVRFSRCVLLNYWKVLPKSFLRSMGQWAVITGAGDGIGKAYSFELAKRGLNVVLISRTLEKLEAIATEIERTTGRSVKIIQADFTKDDIYEHIKEKLAGLEIGILVNNVGMLPNLLPSHFLNAPDEIQSLIHCNITSVVKMTQLILKHMESRQKGLILNISSGIALFPWPLYSMYSASKAFVCAFSKALQEEYKAKEVIIQVLTPYAVSTAMTKYLNTNVITKTADEFVKESLNYVTIGGETCGCLAHEILAGFLSLIPAWAFYSGAFQRLLLTHYVAYLKLNTKVR // <- proteina da testosterona
}

void teste_6(){
    string sequencia_dna = aleatorio(1000000000, nucleotideos);
    //teste_single(sequencia_dna);    
    teste(sequencia_dna);
}

void teste_7(){
    string sequencia_dna = aleatorio(3000000000, nucleotideos);
    sequencia_dna = valida(sequencia_dna, nucleotideos);
    cout << "Sequencia de DNA: " << colorir(sequencia_dna) << endl << endl;
    
    cout << "Frequencia de nucleotideos:" << endl;
    int *frequencia = frequencia_nucleotideos(sequencia_dna, nucleotideos);
    for(int i = 0; i < 4; i++){
        cout << nucleotideos[i] << ": " << frequencia[i] << endl;
    }
    cout << "Rosalind: ";
    for(int i = 0; i < 4; i++){
        cout << frequencia[i] << " ";
    }
    cout << endl << endl;
    
    cout << "Complemento DNA: " << endl;
    string complemento = complemento_dna(sequencia_dna);
    imprime_complemento_dna(sequencia_dna, complemento);
    cout << "Complemento reverso DNA:" << endl;
    cout << colorir(inverso(complemento)) << endl << endl;
    std::string().swap(complemento);
    
    cout << "Traducao de DNA para RNA:" << endl;
    string sequencia_rna = traduzir_dna_rna(sequencia_dna);
    imprime_traducao_dna_rna(sequencia_dna, sequencia_rna);
    std::string().swap(sequencia_dna);
    
    cout << "Sequencia de RNA traduzida para Proteinas:" << endl;
    traduzir_rna_proteina(sequencia_rna);
}

int main(int argc, char *argv[]){
    
    auto inicio = high_resolution_clock::now();

    teste_1(); // rosalind 1
    //teste_2(); // rosalind 2
    //teste_3(); // rosalind 3 proteina
    //teste_4(); // rosalind 4 proteina
    //teste_5(); // testosterona
    //teste_6(); // 1 bilhao aleatorio
    //teste_7(); // 3 bilhoes aleatorio
    
    auto fim = high_resolution_clock::now();
    auto tempo = duration_cast<microseconds>(fim - inicio);
    
    cout << "Tempo decorrido: " << tempo.count() << " milisegundos" << endl;
    
    
    
}



//gcc -fopenmp dna.cpp -o dna.o -lstdc++; ./dna.o

// gcc -fopenmp main.cpp -o main.o -lstdc++; ./main.o 


//90149693 90238279 90354510 / 48592386 46396257 40262574
//259340412 259750590 261806052 / 133372692 126469191 122504067
